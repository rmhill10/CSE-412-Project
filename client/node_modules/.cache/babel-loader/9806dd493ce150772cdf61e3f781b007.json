{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\halogoo\\\\Desktop\\\\ASU\\\\Fall 2020\\\\CSE 412\\\\Project\\\\Phase 3\\\\CSE-412-Project\\\\client\\\\src\\\\components\\\\ComputerPartList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\nimport { ComputerPartsContext } from '../context/ComputerPartsContext';\nimport { Table, Typography } from \"antd\";\nimport { v4 as uuid } from 'uuid';\nimport { bounds } from \"SortComputerParts\";\nconst {\n  Text,\n  Link\n} = Typography;\n\nconst ComputerPartList = props => {\n  _s();\n\n  const {\n    computerPart,\n    setComputerPart\n  } = useContext(ComputerPartsContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await ComputerPartFinder.get(\"/\");\n        setComputerPart(response.data.data.computerPart);\n        console.log(response);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n  const columns = [{\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n    width: 300\n  }, {\n    title: \"Manufacturer\",\n    dataIndex: \"manufacturer\",\n    key: \"manufacturer\",\n    filters: [{\n      text: \"INTEL\",\n      value: \"INTEL\"\n    }, {\n      text: \"AMD\",\n      value: \"AMD\"\n    }, {\n      text: \"NVIDIA\",\n      value: \"NVIDIA\"\n    }, {\n      text: \"Gigabyte\",\n      value: \"Gigabyte\"\n    }, {\n      text: \"MSI\",\n      value: \"MSI\"\n    }, {\n      text: \"Asus\",\n      value: \"Asus\"\n    }, {\n      text: \"EVGA\",\n      value: \"EVGA\"\n    }, {\n      text: \"Zotac\",\n      value: \"Zotac\"\n    }, {\n      text: \"Crucial\",\n      value: \"Crucial\"\n    }, {\n      text: \"Samsung\",\n      value: \"Samsung\"\n    }, {\n      text: \"Corsair\",\n      value: \"Corsair\"\n    }],\n    onFilter: (value, record) => record.manufacturer === value,\n    width: 125\n  }, {\n    title: \"Type\",\n    dataIndex: \"type\",\n    key: \"type\",\n    filters: [{\n      text: \"GPU\",\n      value: \"GPU\"\n    }, {\n      text: \"CPU\",\n      value: \"CPU\"\n    }, {\n      text: \"RAM\",\n      value: \"RAM\"\n    }],\n    onFilter: (value, record) => record.type === value,\n    width: 100\n  }, {\n    title: \"Price ($)\",\n    dataIndex: \"price\",\n    key: \"price\",\n    sorter: (a, b) => a.price - b.price,\n    width: 150\n  }, {\n    title: \"Website\",\n    dataIndex: \"weburl\",\n    key: \"weburl\",\n    render: weburl => /*#__PURE__*/_jsxDEV(Link, {\n      children: weburl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 28\n    }, this),\n    width: 200\n  }];\n  const data = computerPart && computerPart.map(part => {\n    if (part.itemid < 200) {\n      return {\n        key: uuid(),\n        name: part.itemname,\n        manufacturer: part.name,\n        type: \"GPU\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    } else if (part.itemid < 300) {\n      return {\n        key: uuid(),\n        name: part.itemname,\n        manufacturer: part.name,\n        type: \"CPU\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    } else {\n      return {\n        key: uuid(),\n        name: part.itemname,\n        manufacturer: part.name,\n        type: \"RAM\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    scroll: {\n      y: 600\n    },\n    columns: columns,\n    dataSource: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ComputerPartList, \"9GgRSu7NSKS6MP33XJkHTH8H9sk=\");\n\n_c = ComputerPartList;\nexport default ComputerPartList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerPartList\");","map":{"version":3,"sources":["C:/Users/halogoo/Desktop/ASU/Fall 2020/CSE 412/Project/Phase 3/CSE-412-Project/client/src/components/ComputerPartList.jsx"],"names":["React","useEffect","useContext","ComputerPartFinder","ComputerPartsContext","Table","Typography","v4","uuid","bounds","Text","Link","ComputerPartList","props","computerPart","setComputerPart","fetchData","response","get","data","console","log","err","columns","title","dataIndex","key","width","filters","text","value","onFilter","record","manufacturer","type","sorter","a","b","price","render","weburl","map","part","itemid","name","itemname","y"],"mappings":"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","sourcesContent":["import React, {useEffect, useContext} from 'react';\r\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\r\nimport {ComputerPartsContext} from '../context/ComputerPartsContext';\r\nimport {Table, Typography} from \"antd\";\r\nimport {v4 as uuid} from 'uuid'\r\nimport {bounds} from \"SortComputerParts\";\r\n\r\nconst {Text, Link} = Typography;\r\nconst ComputerPartList = (props) => {\r\n\r\n   const {computerPart, setComputerPart} = useContext(ComputerPartsContext);\r\n\r\n   useEffect(() => {\r\n      const fetchData = async () => {\r\n         try {\r\n            const response = await ComputerPartFinder.get(\"/\")\r\n            setComputerPart(response.data.data.computerPart);\r\n            \r\n            console.log(response);\r\n         } catch (err) {\r\n         }\r\n      }\r\n\r\n      fetchData();\r\n   }, [])\r\n\r\n   const columns = [\r\n      {\r\n         title: \"Name\",\r\n         dataIndex: \"name\",\r\n         key: \"name\",\r\n         width: 300\r\n      },\r\n      {\r\n         title: \"Manufacturer\",\r\n         dataIndex: \"manufacturer\",\r\n         key: \"manufacturer\",\r\n         filters: [\r\n            {\r\n               text: \"INTEL\",\r\n               value: \"INTEL\"\r\n            },\r\n            {\r\n               text: \"AMD\",\r\n               value: \"AMD\"\r\n            },\r\n            {\r\n               text: \"NVIDIA\",\r\n               value: \"NVIDIA\"\r\n            },\r\n            {\r\n               text: \"Gigabyte\",\r\n               value: \"Gigabyte\"\r\n            },\r\n            {\r\n               text: \"MSI\",\r\n               value: \"MSI\"\r\n            },\r\n            {\r\n               text: \"Asus\",\r\n               value: \"Asus\"\r\n            },\r\n            {\r\n               text: \"EVGA\",\r\n               value: \"EVGA\"\r\n            },\r\n            {\r\n               text: \"Zotac\",\r\n               value: \"Zotac\"\r\n            },\r\n            {\r\n               text: \"Crucial\",\r\n               value: \"Crucial\"\r\n            },\r\n            {\r\n               text: \"Samsung\",\r\n               value: \"Samsung\"\r\n            },\r\n            {\r\n               text: \"Corsair\",\r\n               value: \"Corsair\"\r\n            },\r\n         ],\r\n         onFilter: (value, record) => record.manufacturer === value,\r\n\r\n         width: 125\r\n\r\n      },\r\n      {\r\n         title: \"Type\",\r\n         dataIndex: \"type\",\r\n         key: \"type\",\r\n         filters: [\r\n            {\r\n               text: \"GPU\",\r\n               value: \"GPU\"\r\n            },\r\n            {\r\n               text: \"CPU\",\r\n               value: \"CPU\"\r\n            },\r\n            {\r\n               text: \"RAM\",\r\n               value: \"RAM\"\r\n            },\r\n         ],\r\n         onFilter: (value, record) => record.type === value,\r\n         width: 100\r\n\r\n      },\r\n      {\r\n         title: \"Price ($)\",\r\n         dataIndex: \"price\",\r\n         key: \"price\",\r\n         sorter: (a, b) => a.price - b.price,\r\n         width: 150\r\n\r\n      },\r\n      {\r\n         title: \"Website\",\r\n         dataIndex: \"weburl\",\r\n         key: \"weburl\",\r\n         render: weburl => <Link>{weburl}</Link>,\r\n         width: 200\r\n      },\r\n   ]\r\n\r\n   const data = computerPart && computerPart.map(part => {\r\n         if (part.itemid < 200) {\r\n            return (\r\n               {\r\n                  key: uuid(),\r\n                  name: part.itemname,\r\n                  manufacturer: part.name,\r\n                  type: \"GPU\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         } else if (part.itemid < 300) {\r\n            return (\r\n               {\r\n                  key: uuid(),\r\n                  name: part.itemname,\r\n                  manufacturer: part.name,\r\n                  type: \"CPU\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         } else {\r\n            return (\r\n               {\r\n                  key: uuid(),\r\n                  name: part.itemname,\r\n                  manufacturer: part.name,\r\n                  type: \"RAM\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         }\r\n\r\n      }\r\n   )\r\n   return (<Table scroll={{y: 600}} columns={columns} dataSource={data}/>)\r\n}\r\n\r\nexport default ComputerPartList\r\n"]},"metadata":{},"sourceType":"module"}