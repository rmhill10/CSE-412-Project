{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\CSE-412-Project\\\\client\\\\src\\\\components\\\\ComputerPartList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\nimport { ComputerPartsContext } from '../context/ComputerPartsContext';\nimport { Table, Typography } from \"antd\";\nconst {\n  Text,\n  Link\n} = Typography;\n\nconst ComputerPartList = props => {\n  _s();\n\n  const {\n    computerPart,\n    setComputerPart\n  } = useContext(ComputerPartsContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await ComputerPartFinder.get(\"/\");\n        setComputerPart(response.data.data.computerPart);\n        console.log(response);\n      } catch (err) {}\n    };\n\n    fetchData();\n  }, []);\n  const columns = [{\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"Type\",\n    dataIndex: \"type\",\n    key: \"type\"\n  }, {\n    title: \"Price\",\n    dataIndex: \"price\",\n    key: \"price\",\n    sorter: {\n      compare: (a, b) => a.price = b.price\n    }\n  }, {\n    title: \"Website\",\n    dataIndex: \"weburl\",\n    key: \"weburl\",\n    render: weburl => /*#__PURE__*/_jsxDEV(Link, {\n      children: weburl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 28\n    }, this)\n  }];\n  const data = computerPart && computerPart.map(part => {\n    if (part.itemid < 200) {\n      return {\n        key: part.itemid,\n        name: part.itemname,\n        type: \"GPU\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    } else if (part.itemid < 300) {\n      return {\n        key: part.itemid,\n        name: part.itemname,\n        type: \"CPU\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    } else {\n      return {\n        key: part.itemid,\n        name: part.itemname,\n        type: \"RAM\",\n        price: part.price,\n        weburl: part.weburl\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    dataSource: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ComputerPartList, \"9GgRSu7NSKS6MP33XJkHTH8H9sk=\");\n\n_c = ComputerPartList;\nexport default ComputerPartList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerPartList\");","map":{"version":3,"sources":["C:/Users/User/CSE-412-Project/client/src/components/ComputerPartList.jsx"],"names":["React","useEffect","useContext","ComputerPartFinder","ComputerPartsContext","Table","Typography","Text","Link","ComputerPartList","props","computerPart","setComputerPart","fetchData","response","get","data","console","log","err","columns","title","dataIndex","key","sorter","compare","a","b","price","render","weburl","map","part","itemid","name","itemname","type"],"mappings":"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","sourcesContent":["import React, {useEffect, useContext} from 'react';\r\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\r\nimport {ComputerPartsContext} from '../context/ComputerPartsContext';\r\nimport {Table, Typography} from \"antd\";\r\n\r\nconst {Text, Link} = Typography;\r\nconst ComputerPartList = (props) => {\r\n\r\n   const {computerPart, setComputerPart} = useContext(ComputerPartsContext);\r\n\r\n   useEffect(() => {\r\n      const fetchData = async () => {\r\n         try {\r\n            const response = await ComputerPartFinder.get(\"/\")\r\n            setComputerPart(response.data.data.computerPart);\r\n            console.log(response);\r\n         } catch (err) {\r\n         }\r\n      }\r\n\r\n      fetchData();\r\n   }, [])\r\n\r\n   const columns = [\r\n      {\r\n         title: \"Name\",\r\n         dataIndex: \"name\",\r\n         key: \"name\"\r\n\r\n\r\n      },\r\n      {\r\n         title: \"Type\",\r\n         dataIndex: \"type\",\r\n         key: \"type\",\r\n      },\r\n      {\r\n         title: \"Price\",\r\n         dataIndex: \"price\",\r\n         key: \"price\",\r\n         sorter: {\r\n            compare: (a, b) => a.price = b.price\r\n         }\r\n      },\r\n      {\r\n         title: \"Website\",\r\n         dataIndex: \"weburl\",\r\n         key: \"weburl\",\r\n         render: weburl => <Link>{weburl}</Link>\r\n      },\r\n\r\n   ]\r\n\r\n\r\n   const data = computerPart && computerPart.map(part => {\r\n         if (part.itemid < 200) {\r\n            return (\r\n               {\r\n                  key: part.itemid,\r\n                  name: part.itemname,\r\n                  type: \"GPU\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         } else if (part.itemid < 300) {\r\n            return (\r\n               {\r\n                  key: part.itemid,\r\n                  name: part.itemname,\r\n                  type: \"CPU\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         } else {\r\n            return (\r\n               {\r\n                  key: part.itemid,\r\n                  name: part.itemname,\r\n                  type: \"RAM\",\r\n                  price: part.price,\r\n                  weburl: part.weburl\r\n               }\r\n            )\r\n         }\r\n\r\n      }\r\n   )\r\n\r\n   return (<Table columns={columns} dataSource={data}/>)\r\n}\r\n\r\nexport default ComputerPartList\r\n"]},"metadata":{},"sourceType":"module"}