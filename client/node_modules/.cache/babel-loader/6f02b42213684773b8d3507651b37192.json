{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\halogoo\\\\Desktop\\\\ASU\\\\Fall 2020\\\\CSE 412\\\\Project\\\\Phase 3\\\\CSE-412-Project\\\\client\\\\src\\\\components\\\\SortComputerParts.jsx\",\n    _s = $RefreshSig$();\n\nimport 'antd/dist/antd.css';\nimport React, { useContext, useState } from 'react';\nimport { Button, Select, Slider, Typography } from \"antd\";\nimport { ALL, AMD, Asus, Corsair, CPU, Crucial, EVGA, Gigabyte, GPU, INTEL, MSI, NVIDIA, RAM, Samsung, Zotac } from \"../utils/constants\";\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\nimport { ComputerPartsContext } from \"../context/ComputerPartsContext\";\nconst {\n  Option\n} = Select;\nconst {\n  Title,\n  Text\n} = Typography;\n\nconst SortComputerParts = () => {\n  _s();\n\n  const {\n    computerPart,\n    setComputerPart\n  } = useContext(ComputerPartsContext); // This function will run when the user presses search.\n  // So here is where we'll make the API call using the\n  // hooks' state variables\n\n  const runQuery = async e => {\n    try {\n      // Test Query\n      // const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\n      // setComputerPart((response.data.data.computerPart));\n      // Do this to merge different queries\n      if (type === GPU) {\n        const response = await ComputerPartFinder.get(`/gpus/${bounds.power_lower_bound}/${bounds.power_upper_bound}/${bounds.vram_lower_bound}/${bounds.vram_upper_bound}/${bounds.memory_clock_lower_bound}/${bounds.memory_clock_upper_bound}`);\n        setComputerPart(response.data.data.computerPart);\n      } else if (type === CPU) {\n        const response = await ComputerPartFinder.get(`/cpus/${bounds.cores_lower_bound}/${bounds.cores_upper_bound}/${bounds.clock_lower_bound}/${bounds.clock_upper_bound}`);\n        setComputerPart(response.data.data.computerPart);\n      } else if (type === RAM) {\n        const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\n        setComputerPart(response.data.data.computerPart);\n      } else {\n        const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\n        const response2 = await ComputerPartFinder.get(`/gpus/${bounds.power_lower_bound}/${bounds.power_upper_bound}/${bounds.vram_lower_bound}/${bounds.vram_upper_bound}/${bounds.memory_clock_lower_bound}/${bounds.memory_clock_upper_bound}`);\n        const response3 = await ComputerPartFinder.get(`/cpus/${bounds.cores_lower_bound}/${bounds.cores_upper_bound}/${bounds.clock_lower_bound}/${bounds.clock_upper_bound}`);\n        const mergedArray = response.data.data.computerPart.concat(response2.data.data.computerPart, response3.data.data.computerPart);\n        setComputerPart(mergedArray);\n      }\n    } catch (err) {}\n  }; // For the type drop-down filter. The table can actually do this filter\n  // on its own on the frontend. Not sure if that's allowed tho\n\n\n  const [type, setType] = useState(ALL);\n\n  const typeOnChange = type => {\n    setType(type);\n  }; // Same logic as above\n\n\n  const [manufacturer, setManufacturer] = useState(ALL);\n\n  const manufacturerOnChange = manufacturer => {\n    setManufacturer(manufacturer);\n  }; // All of these will get updated automatically when the user\n  // uses the slider. 'bounds' is an object, so retrieve these using bounds.power_lower_bound, etc\n\n\n  const [bounds, setBounds] = useState({\n    power_lower_bound: 15,\n    power_upper_bound: 374,\n    vram_lower_bound: 0.5,\n    vram_upper_bound: 16,\n    memory_clock_lower_bound: 600,\n    memory_clock_upper_bound: 1125,\n    cores_lower_bound: 4,\n    cores_upper_bound: 34,\n    clock_lower_bound: 2.8,\n    clock_upper_bound: 3.5,\n    clock_frequency_lower_bound: 800,\n    clock_frequency_upper_bound: 2400,\n    capacity_lower_bound: 1,\n    capacity_upper_bound: 16\n  }); // Every time a slider is edited, this function is called\n  // and the corresponding state variable gets changed\n\n  const sliderOnChange = async (value, type) => {\n    setBounds({ ...bounds,\n      [type + \"lower_bound\"]: value[0],\n      [type + \"upper_bound\"]: value[1]\n    });\n  }; // Labels each slider at the given points.\n\n\n  const gpuPowermarks = {\n    15: '15',\n    195: '195',\n    374: '374'\n  };\n  const gpuVramMarks = {\n    0.5: '0.5',\n    16: '16',\n    32: '32'\n  };\n  const gpuMemoryClockMarks = {\n    600: '600',\n    1125: '1125',\n    1650: '1650'\n  };\n  const cpuCoresMarks = {\n    4: '4',\n    34: '34',\n    64: '64'\n  };\n  const cpuClockMarks = {\n    2.8: '2.8',\n    3.5: '3.5',\n    4.1: '4.1'\n  };\n  const ramClockFrequencyMarks = {\n    800: '800',\n    2400: '2400',\n    4000: '4000'\n  };\n  const ramCapacityMarks = {\n    1: '1',\n    8: '8',\n    16: '16',\n    32: '32'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"30px 0 \"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      onChange: chosenType => typeOnChange(chosenType),\n      style: {\n        width: 200\n      },\n      defaultValue: 'Type',\n      children: [/*#__PURE__*/_jsxDEV(Option, {\n        value: ALL,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: GPU,\n        children: \"GPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: CPU,\n        children: \"CPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: RAM,\n        children: \"RAM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      onChange: chosenManufacturer => manufacturerOnChange(chosenManufacturer),\n      style: {\n        width: 200\n      },\n      defaultValue: 'Manufacturer',\n      children: [/*#__PURE__*/_jsxDEV(Option, {\n        value: ALL,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: INTEL,\n        children: \"INTEL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: AMD,\n        children: \"AMD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: NVIDIA,\n        children: \"NVIDIA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Gigabyte,\n        children: \"Gigabyte\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: MSI,\n        children: \"MSI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Asus,\n        children: \"Asus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: EVGA,\n        children: \"EVGA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Zotac,\n        children: \"Zotac\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Crucial,\n        children: \"Crucial\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Samsung,\n        children: \"Samsung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: Corsair,\n        children: \"Corsair\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => runQuery(e),\n      type: 'primary',\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      style: {\n        margin: '30px 0 20px 0'\n      },\n      level: 4,\n      children: \"GPU Variables\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: \"Power (W)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} W`,\n        step: 5,\n        min: 15,\n        max: 374,\n        marks: gpuPowermarks,\n        onChange: value => sliderOnChange(value, \"power_\"),\n        range: true,\n        defaultValue: [15, 374]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: \"VRAM (GB)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} GB`,\n        step: 0.5,\n        min: 0.5,\n        max: 32,\n        marks: gpuVramMarks,\n        onChange: value => sliderOnChange(value, \"vram_\"),\n        range: true,\n        defaultValue: [0.5, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: \"Memory Clock (MHz)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} MHz`,\n        step: 20,\n        min: 600,\n        max: 1650,\n        marks: gpuMemoryClockMarks,\n        onChange: value => sliderOnChange(value, \"memory_clock_\"),\n        range: true,\n        defaultValue: [600, 1650]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      style: {\n        margin: '30px 0 20px 0'\n      },\n      level: 4,\n      children: \"CPU Variables\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Cores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} cores`,\n        min: 4,\n        max: 64,\n        step: 2,\n        marks: cpuCoresMarks,\n        onChange: value => sliderOnChange(value, \"cores_\"),\n        range: true,\n        defaultValue: [4, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Clock (GHz)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} GHz`,\n        step: 0.1,\n        min: 2.8,\n        max: 4.1,\n        marks: cpuClockMarks,\n        onChange: value => sliderOnChange(value, \"clock_\"),\n        range: true,\n        defaultValue: [2.8, 4.1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      style: {\n        margin: '30px 0 20px 0'\n      },\n      level: 4,\n      children: \"RAM Variables\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Clock Frequency (GHz)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} GHz`,\n        step: 50,\n        min: 800,\n        max: 4000,\n        marks: ramClockFrequencyMarks,\n        onChange: value => sliderOnChange(value, \"clock_frequency_\"),\n        range: true,\n        defaultValue: [800, 4000]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 0 40px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Capacity (GB)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        tipFormatter: value => `${value} GB`,\n        min: 1,\n        max: 32,\n        marks: ramCapacityMarks,\n        onChange: value => sliderOnChange(value, \"capacity_\"),\n        range: true,\n        defaultValue: [1, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SortComputerParts, \"b9p5puyRnqMMXHGiW/C5isPWgqU=\");\n\n_c = SortComputerParts;\nexport default SortComputerParts;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortComputerParts\");","map":{"version":3,"sources":["C:/Users/halogoo/Desktop/ASU/Fall 2020/CSE 412/Project/Phase 3/CSE-412-Project/client/src/components/SortComputerParts.jsx"],"names":["React","useContext","useState","Button","Select","Slider","Typography","ALL","AMD","Asus","Corsair","CPU","Crucial","EVGA","Gigabyte","GPU","INTEL","MSI","NVIDIA","RAM","Samsung","Zotac","ComputerPartFinder","ComputerPartsContext","Option","Title","Text","SortComputerParts","computerPart","setComputerPart","runQuery","e","type","response","get","bounds","power_lower_bound","power_upper_bound","vram_lower_bound","vram_upper_bound","memory_clock_lower_bound","memory_clock_upper_bound","data","cores_lower_bound","cores_upper_bound","clock_lower_bound","clock_upper_bound","clock_frequency_lower_bound","clock_frequency_upper_bound","capacity_lower_bound","capacity_upper_bound","response2","response3","mergedArray","concat","err","setType","typeOnChange","manufacturer","setManufacturer","manufacturerOnChange","setBounds","sliderOnChange","value","gpuPowermarks","gpuVramMarks","gpuMemoryClockMarks","cpuCoresMarks","cpuClockMarks","ramClockFrequencyMarks","ramCapacityMarks","margin","chosenType","width","chosenManufacturer","marginTop"],"mappings":"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","sourcesContent":["import 'antd/dist/antd.css';\r\nimport React, {useContext, useState} from 'react';\r\n\r\nimport {Button, Select, Slider, Typography} from \"antd\";\r\nimport {\r\n   ALL,\r\n   AMD,\r\n   Asus, Corsair,\r\n   CPU,\r\n   Crucial,\r\n   EVGA,\r\n   Gigabyte,\r\n   GPU,\r\n   INTEL,\r\n   MSI,\r\n   NVIDIA,\r\n   RAM,\r\n   Samsung,\r\n   Zotac\r\n} from \"../utils/constants\";\r\nimport ComputerPartFinder from \"../apis/ComputerPartFinder\";\r\nimport {ComputerPartsContext} from \"../context/ComputerPartsContext\";\r\n\r\nconst {Option} = Select;\r\nconst {Title, Text} = Typography;\r\n\r\n\r\nconst SortComputerParts = () => {\r\n   const {computerPart, setComputerPart} = useContext(ComputerPartsContext);\r\n\r\n\r\n   // This function will run when the user presses search.\r\n   // So here is where we'll make the API call using the\r\n   // hooks' state variables\r\n   const runQuery = async e => {\r\n      try {\r\n         // Test Query\r\n         // const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\r\n         // setComputerPart((response.data.data.computerPart));\r\n\r\n         // Do this to merge different queries\r\n\r\n         if(type===GPU)\r\n         {\r\n            const response = await ComputerPartFinder.get(`/gpus/${bounds.power_lower_bound}/${bounds.power_upper_bound}/${bounds.vram_lower_bound}/${bounds.vram_upper_bound}/${bounds.memory_clock_lower_bound}/${bounds.memory_clock_upper_bound}`);\r\n            setComputerPart((response.data.data.computerPart));\r\n         }\r\n         else if(type===CPU)\r\n         {\r\n            const response = await ComputerPartFinder.get(`/cpus/${bounds.cores_lower_bound}/${bounds.cores_upper_bound}/${bounds.clock_lower_bound}/${bounds.clock_upper_bound}`);\r\n            setComputerPart((response.data.data.computerPart));\r\n         }\r\n         else if(type===RAM)\r\n         {\r\n            const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\r\n            setComputerPart((response.data.data.computerPart));\r\n         }\r\n         else\r\n         {\r\n            const response = await ComputerPartFinder.get(`/ram/${bounds.clock_frequency_lower_bound}/${bounds.clock_frequency_upper_bound}/${bounds.capacity_lower_bound}/${bounds.capacity_upper_bound}`);\r\n            const response2 = await ComputerPartFinder.get(`/gpus/${bounds.power_lower_bound}/${bounds.power_upper_bound}/${bounds.vram_lower_bound}/${bounds.vram_upper_bound}/${bounds.memory_clock_lower_bound}/${bounds.memory_clock_upper_bound}`);\r\n            const response3 = await ComputerPartFinder.get(`/cpus/${bounds.cores_lower_bound}/${bounds.cores_upper_bound}/${bounds.clock_lower_bound}/${bounds.clock_upper_bound}`);\r\n            const mergedArray = response.data.data.computerPart.concat(\r\n               response2.data.data.computerPart, response3.data.data.computerPart);\r\n            setComputerPart(mergedArray);\r\n         }\r\n\r\n      } catch (err) {\r\n      }\r\n   }\r\n\r\n   // For the type drop-down filter. The table can actually do this filter\r\n   // on its own on the frontend. Not sure if that's allowed tho\r\n   const [type, setType] = useState(ALL);\r\n\r\n   const typeOnChange = type => {\r\n      setType(type);\r\n   }\r\n\r\n   // Same logic as above\r\n   const [manufacturer, setManufacturer] = useState(ALL);\r\n\r\n   const manufacturerOnChange = manufacturer => {\r\n      setManufacturer(manufacturer);\r\n   }\r\n\r\n   // All of these will get updated automatically when the user\r\n   // uses the slider. 'bounds' is an object, so retrieve these using bounds.power_lower_bound, etc\r\n   const [bounds, setBounds] = useState({\r\n      power_lower_bound: 15,\r\n      power_upper_bound: 374,\r\n      vram_lower_bound: 0.5,\r\n      vram_upper_bound: 16,\r\n      memory_clock_lower_bound: 600,\r\n      memory_clock_upper_bound: 1125,\r\n      cores_lower_bound: 4,\r\n      cores_upper_bound: 34,\r\n      clock_lower_bound: 2.8,\r\n      clock_upper_bound: 3.5,\r\n      clock_frequency_lower_bound: 800,\r\n      clock_frequency_upper_bound: 2400,\r\n      capacity_lower_bound: 1,\r\n      capacity_upper_bound: 16\r\n   })\r\n\r\n   // Every time a slider is edited, this function is called\r\n   // and the corresponding state variable gets changed\r\n   const sliderOnChange = async (value, type) => {\r\n      setBounds({...bounds, [type + \"lower_bound\"]: value[0], [type + \"upper_bound\"]: value[1]});\r\n   }\r\n\r\n   // Labels each slider at the given points.\r\n   const gpuPowermarks = {\r\n      15: '15',\r\n      195: '195',\r\n      374: '374'\r\n   }\r\n   const gpuVramMarks = {\r\n      0.5: '0.5',\r\n      16: '16',\r\n      32: '32'\r\n   }\r\n   const gpuMemoryClockMarks = {\r\n      600: '600',\r\n      1125: '1125',\r\n      1650: '1650'\r\n   }\r\n   const cpuCoresMarks = {\r\n      4: '4',\r\n      34: '34',\r\n      64: '64'\r\n   }\r\n   const cpuClockMarks = {\r\n      2.8: '2.8',\r\n      3.5: '3.5',\r\n      4.1: '4.1'\r\n   }\r\n   const ramClockFrequencyMarks = {\r\n      800: '800',\r\n      2400: '2400',\r\n      4000: '4000'\r\n   }\r\n   const ramCapacityMarks = {\r\n      1: '1',\r\n      8: '8',\r\n      16: '16',\r\n      32: '32'\r\n   }\r\n\r\n\r\n   return (\r\n      <div style={{margin: \"30px 0 \"}}>\r\n         <Select onChange={chosenType => typeOnChange(chosenType)}\r\n                 style={{width: 200}} defaultValue={'Type'}>\r\n            <Option value={ALL}>All</Option>\r\n            <Option value={GPU}>GPU</Option>\r\n            <Option value={CPU}>CPU</Option>\r\n            <Option value={RAM}>RAM</Option>\r\n         </Select>\r\n         <Select onChange={chosenManufacturer => manufacturerOnChange(chosenManufacturer)}\r\n                 style={{width: 200}} defaultValue={'Manufacturer'}>\r\n            <Option value={ALL}>All</Option>\r\n            <Option value={INTEL}>INTEL</Option>\r\n            <Option value={AMD}>AMD</Option>\r\n            <Option value={NVIDIA}>NVIDIA</Option>\r\n            <Option value={Gigabyte}>Gigabyte</Option>\r\n            <Option value={MSI}>MSI</Option>\r\n            <Option value={Asus}>Asus</Option>\r\n            <Option value={EVGA}>EVGA</Option>\r\n            <Option value={Zotac}>Zotac</Option>\r\n            <Option value={Crucial}>Crucial</Option>\r\n            <Option value={Samsung}>Samsung</Option>\r\n            <Option value={Corsair}>Corsair</Option>\r\n         </Select>\r\n         <Button onClick={(e => runQuery(e))} type={'primary'}>Search</Button>\r\n\r\n         <Title style={{margin: '30px 0 20px 0'}} level={4}>GPU Variables</Title>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text>Power (W)</Text>\r\n            <Slider tipFormatter={value => `${value} W`} step={5} min={15} max={374} marks={gpuPowermarks}\r\n                    onChange={value => sliderOnChange(value, \"power_\")} range\r\n                    defaultValue={[15, 374]}/>\r\n         </div>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text>VRAM (GB)</Text>\r\n            <Slider tipFormatter={value => `${value} GB`} step={0.5} min={0.5} max={32} marks={gpuVramMarks}\r\n                    onChange={value => sliderOnChange(value, \"vram_\")} range\r\n                    defaultValue={[0.5, 32]}/>\r\n         </div>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text>Memory Clock (MHz)</Text>\r\n            <Slider tipFormatter={value => `${value} MHz`} step={20} min={600} max={1650} marks={gpuMemoryClockMarks}\r\n                    onChange={value => sliderOnChange(value, \"memory_clock_\")} range\r\n                    defaultValue={[600, 1650]}/>\r\n         </div>\r\n\r\n\r\n         <Title style={{margin: '30px 0 20px 0'}} level={4}>CPU Variables</Title>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text style={{marginTop: '10px'}}>Cores</Text>\r\n            <Slider tipFormatter={value => `${value} cores`} min={4} max={64} step={2} marks={cpuCoresMarks} onChange={value => sliderOnChange(value, \"cores_\")}\r\n                    range\r\n                    defaultValue={[4, 64]}/>\r\n         </div>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text style={{marginTop: '10px'}}>Clock (GHz)</Text>\r\n            <Slider tipFormatter={value => `${value} GHz`} step={0.1} min={2.8} max={4.1} marks={cpuClockMarks}\r\n                    onChange={value => sliderOnChange(value, \"clock_\")} range\r\n                    defaultValue={[2.8, 4.1]}/>\r\n         </div>\r\n\r\n\r\n         <Title style={{margin: '30px 0 20px 0'}} level={4}>RAM Variables</Title>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text style={{marginTop: '10px'}}>Clock Frequency (GHz)</Text>\r\n            <Slider tipFormatter={value => `${value} GHz`} step={50} min={800} max={4000} marks={ramClockFrequencyMarks}\r\n                    onChange={value => sliderOnChange(value, \"clock_frequency_\")} range\r\n                    defaultValue={[800, 4000]}/>\r\n         </div>\r\n         <div style={{margin: '0 0 40px 0'}}>\r\n            <Text style={{marginTop: '10px'}}>Capacity (GB)</Text>\r\n            <Slider tipFormatter={value => `${value} GB`}  min={1} max={32} marks={ramCapacityMarks} onChange={value => sliderOnChange(value, \"capacity_\")}\r\n                    range\r\n                    defaultValue={[1, 32]}/>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default SortComputerParts\r\n"]},"metadata":{},"sourceType":"module"}